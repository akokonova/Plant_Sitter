openapi: 3.0.3
info:
  title: Plant Sitter Service API
  version: 1.0.0
servers:
  - url: https://api.plantcare.com

tags:
  - name: profile
    description: "Методы работы с профилем"
  - name: plants
    description: "Методы работы с растениями"
  - name: orders
    description: "Методы работы с заказами"
  - name: reviews
    description: "Методы работы с отзывами"
  - name: support
    description: "Методы работы со службой поддержки"

security:
  - BearerAuth: []

paths:
  /api/v1/users/profile:
    get:
      tags:
        - profile
      summary: Получение данных профиля
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
    patch:
      tags:
        - profile
      summary: Изменение профиля
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileUpdate'
      responses:
        200:
          description: OK

  /api/v1/plants:
    get:
      tags:
        - plants
      summary: Получение списка растений
      parameters:
        - name: pageNumber
          in: query
          schema:
            type: integer
        - name: pageSize
          in: query
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaginatedPlantsResponse'
    post:
      tags:
        - plants
      summary: Добавление растения
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlantCreate'
      responses:
        201:
          description: Created
        400:
          description: Ошибка валидации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                nameError:
                  value:
                    code: VALIDATION_ERROR
                    message: "Ошибка валидации данных"
                    details:
                      field: "name"
                      reason: "Название растения должно содержать от 2 до 50 символов"
                descriptionError:
                  value:
                    code: VALIDATION_ERROR
                    message: "Ошибка валидации данных"
                    details:
                      field: "description"
                      reason: "Описание растения должно содержать от 10 до 500 символов"
                photosError:
                  value:
                    code: VALIDATION_ERROR
                    message: "Ошибка валидации данных"
                    details:
                      field: "photos"
                      reason: "Максимальное количество фотографий - 5"
                careInstructionsError:
                  value:
                    code: VALIDATION_ERROR
                    message: "Ошибка валидации данных"
                    details:
                      field: "careInstructions"
                      reason: "Инструкции по уходу должны содержать от 20 до 1000 символов"
        401:
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: UNAUTHORIZED
                message: "Необходима авторизация"
                details:
                  reason: "Токен авторизации отсутствует или недействителен"
        403:
          description: Доступ запрещен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: FORBIDDEN
                message: "Недостаточно прав"
                details:
                  reason: "Только клиенты могут создавать карточки растений"
        500:
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: INTERNAL_ERROR
                message: "Внутренняя ошибка сервера"
                details:
                  reason: "Не удалось сохранить данные растения"

  /api/v1/plants/{plantId}:
    delete:
      tags:
        - plants
      summary: Удаление растения
      parameters:
        - name: plantId
          in: path
          required: true
          schema:
            type: integer
      responses:
        204:
          description: No Content

  /api/v1/orders:
    get:
      tags:
        - orders
      summary: Получение истории заказов
      parameters:
        - name: pageNumber
          in: query
          schema:
            type: integer
        - name: pageSize
          in: query
          schema:
            type: integer
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/OrderStatus'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaginatedOrdersResponse'

  /api/v1/orders/{orderId}:
    get:
      tags:
        - orders
      summary: Получение информации о конкретном заказе
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetailedResponse'

  /api/v1/orders/{orderId}/reviews:
    post:
      tags:
        - reviews
      summary: Создание отзыва на заказ
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewCreate'
      responses:
        201:
          description: Created

  /api/v1/support-tickets:
    post:
      tags:
        - support
      summary: Создание обращения в поддержку
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupportTicketCreate'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportTicket'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
          enum: 
            - VALIDATION_ERROR
            - UNAUTHORIZED
            - FORBIDDEN
            - NOT_FOUND
            - INTERNAL_ERROR
        message:
          type: string
          example: "Неверный формат данных"
        details:
          type: object
          properties:
            field:
              type: string
              example: "name"
            reason:
              type: string
              example: "Название растения должно содержать от 2 до 50 символов"

    Profile:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        photo:
          type: string
          format: uri
        city:
          type: string
        role:
          type: string
          enum: [CLIENT, SITTER, SUPPORT]

    ProfileUpdate:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        photo:
          type: string
          format: uri
        city:
          type: string

    Plant:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        photos:
          type: array
          items:
            type: string
            format: uri
        careInstructions:
          type: string

    PaginatedPlantsResponse:
      type: object
      properties:
        plants:
          type: array
          items:
            $ref: '#/components/schemas/Plant'
        pagination:
          type: object
          properties:
            totalPlants:
              type: integer
            totalPages:
              type: integer
            currentPage:
              type: integer
            pageSize:
              type: integer

    PlantCreate:
      type: object
      required:
        - name
        - description
        - careInstructions
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 50
          example: "Монстера"
        description:
          type: string
          minLength: 10
          maxLength: 500
          example: "Тропическое растение с крупными резными листьями"
        careInstructions:
          type: string
          minLength: 20
          maxLength: 1000
          example: "Полив раз в неделю, яркий рассеянный свет, влажность 60-70%"
        photos:
          type: array
          items:
            type: string
            format: uri
          maxItems: 5

    OrderStatus:
      type: string
      enum:
        - NEW
        - IN_PROGRESS
        - COMPLETED
        - CANCELLED

    OrderResponse:
      type: object
      properties:
        id:
          type: integer
        status:
          $ref: '#/components/schemas/OrderStatus'
        createdAt:
          type: string
          format: date-time
        plant:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
        totalPrice:
          type: number

    PaginatedOrdersResponse:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/OrderResponse'
        pagination:
          type: object
          properties:
            totalOrders:
              type: integer
            totalPages:
              type: integer
            currentPage:
              type: integer
            pageSize:
              type: integer

    OrderDetailedResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/OrderResponse'
      properties:
        description:
          type: string
        address:
          type: string
        orderDate:
          type: string
          format: date-time
        sitterInfo:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            rating:
              type: number
        review:
          $ref: '#/components/schemas/Review'

    ReviewCreate:
      type: object
      required:
        - rating
        - comment
      properties:
        rating:
          type: integer
          minimum: 1
          maximum: 5
          example: 5
        comment:
          type: string
          minLength: 10
          maxLength: 300
          example: "Отличный уход за растением, все рекомендации выполнены"

    Review:
      type: object
      allOf:
        - $ref: '#/components/schemas/ReviewCreate'
      properties:
        id:
          type: integer
        createdAt:
          type: string
          format: date-time
        authorId:
          type: integer
        orderId:
          type: integer


    SupportTicketCreate:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          minLength: 10
          maxLength: 500
          example: "Возникла проблема с отображением фотографий растения"

    SupportTicket:
      type: object
      properties:
        id:
          type: integer
        authorId:
          type: integer
        message:
          type: string
        status:
          type: string
          enum: [NEW, IN_PROGRESS, RESOLVED]
        createdAt:
          type: string
          format: date-time